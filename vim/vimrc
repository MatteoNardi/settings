call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'rust-lang/rust.vim'
Plug 'rhysd/vim-clang-format'
Plug 'junegunn/fzf'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()
" :CocInstall coc-git coc-rust-analyzer coc-clangd clangd.install
" :CocInstall coc-prettier coc-tsserver
" :PlugInstall
" sudo apt-get install nodejs npm


set term=xterm-256color
set nocompatible

"buffer
set bufhidden=hide
set wildmenu
set wildignorecase
set updatetime=100 "For better performance in vim-githutter

"encoding
scriptencoding utf-8
set encoding=utf-8

"line numbering
set number

"mouse support
set mouse=a
set ttymouse=xterm2

"statusline
set showcmd
set statusline=%m\ %f\ %=%4l/%L\ %P
set laststatus=2
set noruler

"colorscheme
let g:color_list=[['gruvbox', 'dark'], ['gruvbox', 'light'], ['smyck', 'dark']]
let g:color_current=-1
function! ChangeColorscheme()
	let g:color_current = (g:color_current + 1) % len(g:color_list)
	let c = g:color_list[g:color_current]
	execute('set background=' . c[1])
	execute('colorscheme ' . c[0])
endfunction
nnoremap <silent> <F3> :call ChangeColorscheme()<CR>
let g:gruvbox_italic=1

set t_8f=[38;2;%lu;%lu;%lum
set t_8b=[48;2;%lu;%lu;%lum
set t_Cs="\e[4:3m"
set t_Ce="\e[4:0m"
set termguicolors

set t_ut=
syntax enable
call ChangeColorscheme()

"show invisibles
set list listchars=tab:Â»Â·,trail:Â·,extends:Â·,precedes:Â·
highlight ExtraWhitespace guifg=purple
match ExtraWhitespace /\s\+$/
set nolist

"search settings
set ignorecase
set smartcase
set incsearch
set hlsearch

"windows split
set splitbelow
set splitright

"backspace
set backspace=indent,eol,start
set backspace=2

"===== Shortcuts =====
let mapleader=","
nnoremap <Leader>vr :so ~/.vimrc<CR>
nnoremap <Leader>vj :sp ~/.vimrc<CR>
nnoremap <Leader>vs :execute "sp ~/.vim/pack/my_settings/start/my_settings/syntax/".&ft.".vim"<CR>
nnoremap <Leader>n :NERDTreeToggle<CR>
nnoremap <Leader>/ /<C-R>"<cr>
nnoremap <Leader>a :w<CR>:make<CR>
nnoremap <Leader>w :w !sudo tee "%" > /dev/null<cr>
nnoremap <Leader>cd :lcd %:p:h<cr>

" fxf
let $FZF_DEFAULT_COMMAND = 'fd --type f'
nmap <C-p> :FZF<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-v': 'split',
  \ 'ctrl-g': 'vsplit' }

iabbr shebang #!/usr/bin/env

au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown
au BufNewFile,BufFilePre,BufRead *.jinja set filetype=jinja
"indentation
filetype plugin indent on

" Compilation
" let g:program="echo No program set"
let g:arguments=""
nnoremap <F6> :let g:program=expand("%")
nnoremap <F7> :let g:arguments=
nnoremap <F8> :execute(":!clear && " . g:program . " " . g:arguments)<CR>



" coc.nvim
nmap <leader>p <Plug>(coc-format)

set hidden " TextEdit might fail if hidden is not set.
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup
" Give more space for displaying messages.
set cmdheight=1
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
map <silent> <C-]> <Plug>(coc-definition)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json,rust setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
"autocmd CursorHold * CocCommand git.refresh



" Rust - Create folds
let g:rust_fold = 1
